"use strict"; function _defineProperty(t, e, i) { return e in t ? Object.defineProperty(t, e, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = i, t } class Slider { constructor(t, e) { _defineProperty(this, "reset", () => { }), _defineProperty(this, "setState", () => { this.slides.forEach((t, e) => { e > this.currentSlide - 1 ? (t.classList.remove(this.rootClassName + "__slide--prev"), t.classList.add(this.rootClassName + "__slide--next")) : e < this.currentSlide - 1 ? (t.classList.remove(this.rootClassName + "__slide--next"), t.classList.add(this.rootClassName + "__slide--prev")) : (t.classList.remove(this.rootClassName + "__slide--next"), t.classList.remove(this.rootClassName + "__slide--prev")) }), this.currEl = this.slides[this.currentSlide - 1], this.prevEl = this.slides[this.currentSlide - 2], this.nextEl = this.slides[this.currentSlide] }), this.rootClassName = t.substring(1), this.slider = document.querySelector(t), this.wrapper = this.slider.querySelector(t + "__wrapper"), this.slides = this.wrapper.querySelectorAll(t + "__slide"), this.prevBtn = this.slider.querySelector(t + "__prev"), this.nextBtn = this.slider.querySelector(t + "__next"), this.currentSlide = 1, this.setState(), this.gap = e } } class SliderSimpleAnimate extends Slider { constructor(t, e, i) { super(t, e), _defineProperty(this, "animate", ({ timing: t, draw: e, duration: i }) => { this.moving = !0; let s = performance.now(), r = l => { let n = (l - s) / i; n > 1 && (n = 1); let o = t(n); e(o), n < 1 ? requestAnimationFrame(r) : this.moving = !1 }; requestAnimationFrame(r) }), _defineProperty(this, "sliderGo", t => this.wrapper.style.transform = `translate(${t}px, 0)`), _defineProperty(this, "sliderDown", t => t.target.closest(".slider__next") === this.nextBtn ? (this.targetObject = this.nextBtn, void document.addEventListener("pointerup", this.pointUp)) : t.target.closest(".slider__prev") === this.prevBtn ? (this.targetObject = this.prevBtn, void document.addEventListener("pointerup", this.pointUp)) : void 0), _defineProperty(this, "pointUp", t => { t.target.closest(".slider__next") === this.nextBtn && t.target.closest(".slider__next") === this.targetObject ? this.goNext() : t.target.closest(".slider__prev") === this.prevBtn && t.target.closest(".slider__prev") === this.targetObject && this.goPrev(), document.removeEventListener("pointerup", this.pointUp) }), _defineProperty(this, "goNext", () => { if (this._moving || this.currentSlide + 1 > this.slides.length) return; this.currentSlide += 1, this.setState(); let t = this.point, e = this.point - (this.currEl.offsetWidth + this.gap); this.animate({ timing: this.timing, duration: this.duration, draw: i => { this.point = (e - t) * i + t, this.sliderGo(this.point) } }) }), _defineProperty(this, "goPrev", () => { if (this._moving || this.currentSlide - 1 < 1) return; this.currentSlide -= 1, this.setState(); let t = this.point, e = this.point + (this.currEl.offsetWidth + this.gap); this.animate({ timing: this.timing, duration: this.duration, draw: i => { this.point = (e - t) * i + t, this.sliderGo(this.point) } }) }), this.timing = i.timing, this.duration = i.duration, this._moving = !1, this.slider.addEventListener("pointerdown", this.sliderDown), this.point = 0, this.targetObject } set moving(t) { this._moving = t } } class SliderWithBullets extends SliderSimpleAnimate { constructor(t, e, i, s) { super(t, e, i), this.bulletsWrapper = document.querySelector(s.wrapper), this.bulletClassName = this.rootClassName + "__bullet"; for (let t = 0; t < this.slides.length; t++) { let e = document.createElement("li"); e.classList.add(this.bulletClassName), t === this.currentSlide - 1 && e.classList.add(this.bulletClassName + "--active"), this.bulletsWrapper.insertAdjacentElement("beforeend", e) } this.bullets = document.querySelectorAll("." + this.rootClassName + "__bullet") } set moving(t) { var e; (this._moving = t, t) || (null === (e = this.bullets) || void 0 === e || e.forEach((t, e) => { e === this.currentSlide - 1 ? t.classList.add(this.bulletClassName + "--active") : t.classList.remove(this.bulletClassName + "--active") })) } } const linear = t => t; new SliderWithBullets(".slider", 20, { duration: 700, timing: linear }, { wrapper: ".slider__bullets" });